#pragma once
/*
 * This file was generated by ClangActiveObjectGenerator
 */

{{#Includes}}
#include "{{InterfaceHeaderFileName}}"
#include <boost/asio/io_service.hpp>
#include <memory>
{{/Includes}}

{{#Class}}
template <class TExecutor>
class {{InterfaceImplName}} : public {{InterfaceName}} {
public:
  {{InterfaceImplName}}(const std::shared_ptr<{{InterfaceName}}>& impl, TExecutor& executor)
      : m_impl(impl)
      , m_executor(executor)
  {
  }

public: // {{InterfaceName}}
    {{#Methods}}
    {{Signature}} override {
        m_executor.post(
            [this, {{Parameters}}](){
                m_impl.lock()->{{FunctionCall}};
            });
    }

    {{/Methods}}

private:
   std::weak_ptr<{{InterfaceName}}> m_impl;
   TExecutor& m_executor;
};

template <class TInterface, class TExecutor>
std::unique_ptr<TInterface>
make_active_object(const std::shared_ptr<TInterface>& impl, TExecutor& executor);

template <>
std::unique_ptr<{{InterfaceName}}> make_active_object<{{InterfaceName}}, boost::asio::io_service>(
        const std::shared_ptr<{{InterfaceName}}>& impl, boost::asio::io_service& ioService)
{
    return std::make_unique<{{InterfaceImplName}}<boost::asio::io_service>>(impl, ioService);
}
{{/Class}}