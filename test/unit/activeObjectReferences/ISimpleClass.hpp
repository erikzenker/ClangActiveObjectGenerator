#pragma once
/*
 * This file was generated by ClangActiveObject
 */

#include "ISimpleClass.h"
#include "MakeActiveObject.h"
#include <boost/asio/io_service.hpp>
#include <memory>

class ISimpleClassActiveObject : public ISimpleClass {
public:
  ISimpleClassActiveObject(const std::shared_ptr<ISimpleClass>& impl, boost::asio::io_service& ioService)
      : m_impl(impl)
      , m_ioService(ioService)
  {
  }

public: // ISimpleClass
    void foo(int a) override {
        m_ioService.post(
            [this, a](){
                m_impl.lock()->foo(a);
            });
    }


private:
   std::weak_ptr<ISimpleClass> m_impl;
   boost::asio::io_service& m_ioService;
};

template <>
std::unique_ptr<ISimpleClass> make_active_object<ISimpleClass, boost::asio::io_service>(
        const std::shared_ptr<ISimpleClass>& impl, boost::asio::io_service& ioService)
{
    return std::make_unique<ISimpleClassActiveObject>(impl, ioService);
}

