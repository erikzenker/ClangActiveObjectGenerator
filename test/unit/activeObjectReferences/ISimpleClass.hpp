#pragma once
/*
 * This file was generated by ClangActiveObjectGenerator
 */

#include "ISimpleClass.hpp"
#include <memory>

template <class TExecutor>
class ISimpleClassActiveObject : public ISimpleClass {
public:
  ISimpleClassActiveObject(const std::shared_ptr<ISimpleClass>& impl, const std::shared_ptr<TExecutor>& executor)
      : m_impl(impl)
      , m_executor(executor)
  {
  }

public: // ISimpleClass
    void foo(int a) override {
        m_executor->post(
            [this, a](){
                m_impl.lock()->foo(a);
            });
    }


private:
   std::weak_ptr<ISimpleClass> m_impl;
   std::shared_ptr<TExecutor> m_executor;
};

#ifndef MAKE_ACTIVE_OBJECT
#define MAKE_ACTIVE_OBJECT
template <class TInterface, class TExecutor>
class MakeActiveObject {};

template <class TInterface, class TExecutor>
std::unique_ptr<TInterface>
make_active_object(const std::shared_ptr<TInterface>& impl, const std::shared_ptr<TExecutor>& executor)
{
    return MakeActiveObject<TInterface, TExecutor>{}(impl, executor);
}
#endif

template <class TExecutor>
class MakeActiveObject<ISimpleClass, TExecutor> {
public:
    std::unique_ptr<ISimpleClass> operator()(const std::shared_ptr<ISimpleClass>& impl, const std::shared_ptr<TExecutor>& executor){
            return std::make_unique<ISimpleClassActiveObject<TExecutor>>(impl, executor);
    }
};

